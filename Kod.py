# -*- coding: utf-8 -*-
"""Veri Analizi Ã–devi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M7zwQAGQgUvy2ZILQBwnsA1rFgT8at11
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df_raw = pd.read_csv("Ogrenci_Performans.csv", header="infer")
df_raw.head()

df = df_raw.copy()
df.describe().T

df.isnull().sum()

df['Total Not'] = sum([df['Matematik'], df['Okuma'], df['Yazma']])
df.head()

sns.barplot(x=df['Total Not'], y=df['Ebeveyn Egitim Seviyesi'])

plt.hist(df['Matematik'], bins=15);

fig, (ax1,ax2) = plt.subplots(1,2, figsize=(16,6))

ax1.set_title('Okul Yemekhanesi')
sns.barplot(x = 'Okul Yemekhanesi', y = 'Total Not', data= df, ax=ax1)

ax2.set_title('Ozel Ders')
sns.barplot(x='Ozel Ders', y='Total Not', data=df, ax=ax2)

plt.subplots(figsize=(10,5))
sns.countplot(df['Ebeveyn Egitim Seviyesi'])
plt.xlabel('Egitim Seviyesi')
plt.title(label = 'Ebeveyn Egitim Seviyesi', fontsize=15,)
plt.show()

sns.distplot(df['Total Not'], color = 'blue')

df.info()

df.groupby('Cinsiyet')['Total Not'].mean()

df['Cinsiyet'] = df['Cinsiyet'].map({'Erkek': 1, 'Kadin': 2})
df.head()

df.groupby('Ebeveyn Egitim Seviyesi')['Total Not'].mean().sort_values(ascending = True)

df['Ebeveyn Egitim Seviyesi'].head().values

df['Ebeveyn Egitim Seviyesi'] = df['Ebeveyn Egitim Seviyesi'].map({'Lise Mezunu': 1, 'Onlisans Mezunu': 2, 'Lisans Mezunu': 3, "Yuksek Lisans Mezunu": 4})
df.head()

df.groupby('Okul Yemekhanesi')['Total Not'].mean().sort_values(ascending = True)

df['Okul Yemekhanesi'] = df['Okul Yemekhanesi'].map({'Var': 1, 'Yok' : 0}) 
df.head()

df.groupby('Ozel Ders')['Total Not'].mean().sort_values(ascending = True)

df['Ozel Ders'] = df['Ozel Ders'].map({'Var': 1, 'Yok ': 0})
df['Ozel Ders'] = df['Ozel Ders'].fillna(value=0).astype('int64')
df.head(10)

df_corr = df.corr()
df_corr

df_corr['Total Not'].sort_values(ascending=False)

sns.heatmap(df_corr)

df['Ortalama'] = round((df['Total Not'] * 100) / 300).astype('int64')
df.head()

df['Ortalama'].describe()

def durum_kontrolu(Ortalama):
    if Ortalama >= 60:
        return '1'
    else:
        return '0'

df['Basari Durumu'] = df['Ortalama'].apply(durum_kontrolu)
df.head()

def not_hesapla(Ortalama):
    if(Ortalama >= 90):
        return 6
    if(80 <= Ortalama < 90):
        return 5
    if(70 <= Ortalama < 80):
        return 4
    if(60 <= Ortalama < 70):
        return 3
    if(50 <= Ortalama < 60):
        return 2
    else :
        return 1

df['Notlar'] = df['Ortalama'].apply(lambda x: not_hesapla(x))
df.head()

df['Notlar'].value_counts().sort_values()

#'Okul Yemekhanesi'
feature_vectors = df[['Cinsiyet', 'Ebeveyn Egitim Seviyesi','Okul Yemekhanesi','Ozel Ders', 'Okuma','Matematik','Yazma']].values
#'Notlar'/'Okuma'
target = df['Notlar'].values
feature_vectors.shape, target.shape

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(feature_vectors, target, 
                                                    test_size = 0.25, random_state = 45)

from sklearn.preprocessing import MinMaxScaler

scale = MinMaxScaler()

x_train = scale.fit_transform(x_train)
x_test = scale.transform(x_test)

from sklearn.linear_model import  LogisticRegression

model = LogisticRegression( max_iter=7000)

model.fit(x_train, y_train)

y_pred = model.predict(x_test)

print("Training Accuracy :", model.score(x_train, y_train))
print("Testing Accuracy :", model.score(x_test, y_test))

import sklearn

model_svm = sklearn.svm.LinearSVC(penalty='l1', dual=False,loss='squared_hinge',  max_iter=7000)

model_svm.fit(x_train, y_train)

print("Training Accuracy :", model_svm.score(x_train, y_train))
print("Testing Accuracy :", model_svm.score(x_test, y_test))

from sklearn.ensemble import RandomForestClassifier

model_rm = RandomForestClassifier()

model_rm.fit(x_train, y_train)

y_pred = model_rm.predict(x_test)

print("Training Accuracy :", model_rm.score(x_train, y_train))
print("Testing Accuracy :", model_rm.score(x_test, y_test))